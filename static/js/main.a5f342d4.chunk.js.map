{"version":3,"sources":["images/DoubleRing-1s-610px.gif","theme/globalStyle.js","components/countries.js","utils/index.js","components/availabilities.js","components/SelectedCountryFlag.js","components/common/spinner.js","theme/theme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GlobalStyle","createGlobalStyle","Countries","props","networks","length","westOf50","filter","lat","parseFloat","location","longitude","distinctCountries","Set","map","c","country","sort","console","log","Fragment","index","tabIndex","key","className","selected","toUpperCase","src","toLowerCase","alt","onClick","mapClick","id","availabilities","firstLoad","cnetworks","place","stationStats","network","stations","reduce","stats","free_bikes","empty_slots","percentage","Math","round","city","company","join","split","line","replace","Flag","flag","spinner","style","width","margin","display","theme","colors","App","handleMapClick","setState","selectedCountry","isFirstLoad","isLoading","fetchStations","placeList","state","i","a","b","localeCompare","PromiseArr","url","utils","push","axios","get","then","result","Promise","resolve","data","all","res","countryNetworks","concat","apply","bind","this","loading","catch","error","fetchNetworks","SelectedCountryFlag","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5f342d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/DoubleRing-1s-610px.992b605e.gif\";","// globalStyle.js\r\nimport {createGlobalStyle} from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    background-color: #E7E7E7;\r\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\r\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\r\n      sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    color: #333;\r\n  }\r\n  .pointer {\r\n    cursor: pointer;\r\n  }  \r\n  .headerBg {\r\n    background-color: #0076A8;\r\n  }\r\n  .sideBarBkg {\r\n    background-color: #2C3F50;\r\n  }\r\n  .mainBkg {\r\n    background-color: #E7E7E7;\r\n  }\r\n  .HighAvail {\r\n    color: #388697;\r\n  }\r\n  .LowAvail {\r\n    color: #CC2936;\r\n  }\r\n  .shadow {\r\n    box-shadow: 0 .5rem 1rem #aaa !important;\r\n  }  \r\n  .col-1 {\r\n    padding-right: 0!important;\r\n  }\r\n  div:focus, .selectedFlag {\r\n    background-color: #f26522;\r\n  }  \r\n`;\r\nexport default GlobalStyle;","import React from \"react\";\r\n\r\nconst Countries = (props) => {\r\n    if (!props.networks || props.networks.length === 0) return null;\r\n    // west of 50\r\n    const westOf50 = props.networks.filter(lat => parseFloat(lat.location.longitude) <= 50.00);\r\n    // distinct countries\r\n    const distinctCountries = [...new Set(westOf50.map(c => c.location.country))];\r\n    distinctCountries.sort();\r\nconsole.log(props);\r\n    return (\r\n        <React.Fragment>\r\n            {distinctCountries.map((country, index) =>\r\n                <div tabIndex={index} key={country + \"-\" + index} className={`pointer${props.selected.toUpperCase() === country ? \" selectedFlag\" : \"\"}`}>\r\n                    <img src={\"https://www.countryflags.io/\" + country.toLowerCase() + \"/shiny/64.png\"}\r\n                         alt={\"Country Flag \" + country} className=\"img pointer flag\"\r\n                         onClick={() => props.mapClick(country.toLowerCase())}/>\r\n                </div>\r\n            )}\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default Countries;\r\n","const networks = () => {\r\n    return 'https://api.citybik.es/v2/networks'\r\n};\r\nconst stations = (id) => {\r\n    return 'https://api.citybik.es/v2/networks/' + id\r\n};\r\n\r\nexport default {networks, stations};","import React from \"react\";\r\n// import thumbDown from \"../images/thumbs-down-sign_1f44e.png\"\r\n// import thumbUp from \"../images/thumbs-up-sign_1f44d.png\";\r\n// import Thumb from \"./Thumbs\";\r\n\r\nconst availabilities = (props) => {\r\n    /** @namespace place.network.company **/\r\n    return (\r\n        <React.Fragment>\r\n            {props.firstLoad && \"Please select a Country from the left.\"}\r\n\r\n            {props.cnetworks && props.cnetworks.map((place, index) => {\r\n                const stationStats = place.network.stations\r\n                    .reduce((stats, {free_bikes, empty_slots}) => ({\r\n                        free_bikes: stats.free_bikes + (free_bikes || 0),\r\n                        empty_slots: stats.empty_slots + (empty_slots || 0)\r\n                    }), {free_bikes: 0, empty_slots: 0});\r\n                const percentage = Math.round(stationStats.free_bikes / (stationStats.free_bikes + stationStats.empty_slots) * 100) || 0;\r\n                return (\r\n                    <div className=\"card mb-3 shadow\" key={index}>\r\n                        <div className=\"card-body\">\r\n                            <h1 className={\"display-4 text-center\"}>{place.network.location.city ? place.network.location.city : \"N/A\"}</h1>\r\n                            <p className={\"text-center\"}>\r\n                                Availability:&nbsp;\r\n                                {/*<Thumb percent={percentage}/>*/}\r\n                                <span className={`h3 pl-3 ${percentage === 0 ? \"LowAvail\" : \"HighAvail\"}`}>\r\n                                    {percentage}%\r\n                                </span>\r\n                            </p>\r\n                            <div>\r\n                                <p><u>Companies:</u> {stationStats.free_bikes} bikes\r\n                                    / {stationStats.free_bikes + stationStats.empty_slots} spots</p>\r\n                                <p>{place.network.company.join(\"*\").split(\"*\").map(line =>\r\n                                    <span key={line.replace(/[^\\w\\s]/gi, '')}>{line}<br/></span>)}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            })}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default availabilities;","import React from \"react\";\r\n\r\nconst Flag = (flag) => {\r\n    if (!flag || flag.length === 0) return null;\r\n    return (\r\n        <React.Fragment>\r\n            <div className={\"selected-flag-container\"}>\r\n                <img src={\"https://www.countryflags.io/\" + flag.flag + \"/shiny/64.png\"}\r\n                     alt={\"Country Flag \" + flag.flag} className={\"img\"}/>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default Flag;","import React from 'react';\r\nimport spinner from '../../images/DoubleRing-1s-610px.gif';\r\n\r\nexport default () => {\r\n    return (\r\n        <div>\r\n            <img\r\n                src={spinner}\r\n                style={{ width: '400px', margin: 'auto', display: 'block' }}\r\n                alt=\"Loading...\"\r\n            />\r\n        </div>\r\n    );\r\n};","const theme = {\n    colors: {\n    '$light-bg': '#FFF',\n    '$dark-bg': '#E7E7E7',\n    '$header': '#0076A8',\n    '$sidebar': '#2C3F50',\n    '$hover': '#678678',\n    '$dropshadow': '#AAA',\n    '$text-color': '#333',\n    '$high-availability': '#388697',\n    '$low-availability': '#CC2936',\n    }\n};\n\nexport default theme;\n\n","import React, {Component} from 'react'\nimport GlobalStyle from './theme/globalStyle';\nimport Countries from \"./components/countries\";\nimport axios from \"axios\";\nimport utils from \"./utils\";\nimport Availabilities from \"./components/availabilities\";\nimport SelectedCountryFlag from \"./components/SelectedCountryFlag\";\nimport Spinner from \"./components/common/spinner\";\nimport {ThemeProvider} from \"styled-components\";\nimport theme from \"../src/theme/theme\";\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            networks: [],\n            selectedCountry: '',\n            isFirstLoad: true,\n            countryNetworks: [],\n        };\n        this.handleMapClick = this.handleMapClick.bind(this);\n    };\n\n    handleMapClick = (country) => {\n        this.setState({\n            selectedCountry: country,\n            isFirstLoad: false,\n            isLoading: true,\n        });\n        this.fetchStations();\n        // filter out by selected country and then sort by city name\n        const placeList = this.state.networks.filter(i => i.location.country === country.toUpperCase())\n            .sort((a, b) => a.location.city.localeCompare(b.location.city));\n\n        // call each networks' endpoint, loop over all the station data to aggregate results for each city\n        const PromiseArr = [];\n        for (let i = 0; i < placeList.length; i++) {\n            // make sure they have an ID\n            // console.log(\"plid: \", placeList[i].id);\n            if (placeList[i]) {\n                let url = utils.stations(placeList[i].id);\n                PromiseArr.push(\n                    axios.get(url)\n                        .then(result => new Promise(resolve => resolve(result.data)))\n                );\n            }\n        }\n        // concat results from all network endpoint calls\n        Promise.all(PromiseArr).then(res => {\n            this.setState({\n                countryNetworks: this.state.countryNetworks.concat.apply([], res),\n                isLoading: false,\n            });\n        });\n    };\n\n    fetchStations() {\n        this.setState({loading: true}, () => {\n            axios.get(utils.stations(), {})\n                .then(networks => {\n                    this.setState({\n                        networks: networks.data.networks,\n                        isLoading: false\n                    });\n                })\n                .catch(error => this.setState({\n                    error, isLoading: false\n                }));\n        });\n    }\n\n    componentDidMount() {\n        this.fetchNetworks();\n    }\n\n    fetchNetworks() {\n        this.setState({isLoading: true}, () => {\n            axios.get(utils.networks(), {})\n                .then(networks => {\n                    this.setState({\n                        networks: networks.data.networks,\n                        isLoading: false\n                    });\n                })\n                .catch(error => this.setState({error, isLoading: false}));\n        });\n    }\n\n    render() {\n        const loading = this.state.isLoading;\n\n        if (loading) {\n            return (\n                <React.Fragment>\n                    <Spinner/>\n                </React.Fragment>\n            )\n        } else {\n            return (\n                <ThemeProvider theme={theme}>\n                    <React.Fragment>\n                        <GlobalStyle/>\n\n                        <div className=\"row\">\n                            <div className=\"col-12 m-0 p-0 headerBg sticky-top\">\n                                <React.Fragment>\n                                    {\n                                        this.state.selectedCountry ?\n                                            <SelectedCountryFlag flag={this.state.selectedCountry}/> : ''\n                                    }\n                                </React.Fragment>\n                            </div>\n                            <div className=\"col-1 text-center sideBarBkg\" id=\"flags\">\n                                <Countries networks={this.state.networks}\n                                           mapClick={this.handleMapClick}\n                                            selected={this.state.selectedCountry}/>\n                            </div>\n                            <div className=\"main col-8 h-100 py-3 mainBkg mx-auto\" id=\"main\">\n                                <Availabilities cnetworks={this.state.countryNetworks}\n                                                firstLoad={this.state.isFirstLoad}/>\n                            </div>\n                        </div>\n                    </React.Fragment>\n                </ThemeProvider>\n            );\n        }\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}