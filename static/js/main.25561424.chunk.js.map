{"version":3,"sources":["images/loading.gif","components/countries.js","utils/index.js","components/availabilities.js","components/SelectedCountryFlag.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Countries","props","networks","length","westOf50","filter","lat","parseFloat","location","longitude","distinctCountries","Set","map","c","country","sort","Fragment","index","key","src","toLowerCase","alt","className","onClick","mapClick","id","availabilities","console","log","firstLoad","network","city","name","Flag","flag","App","handleMapClick","placeList","state","i","toUpperCase","a","b","localeCompare","PromiseArr","url","utils","push","axios","get","then","result","Promise","resolve","data","all","res","fetchCountryData","setState","selectedCountry","countryNetworks","isFirstLoad","isLoading","bind","catch","error","this","fetchNetworks","Loading","SelectedCountryFlag","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25561424.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.d377e76e.gif\";","import React from \"react\";\r\n\r\nconst Countries = (props) => {\r\n    if (!props.networks || props.networks.length === 0) return null;\r\n    // west of 50\r\n    const westOf50 = props.networks.filter(lat => parseFloat(lat.location.longitude) <= 50.00);\r\n    // distinct countries\r\n    const distinctCountries = [...new Set(westOf50.map(c => c.location.country))];\r\n    distinctCountries.sort();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {distinctCountries.map((country, index) =>\r\n                <div key={country + \"-\" + index}>\r\n                    <img src={\"https://www.countryflags.io/\" + country.toLowerCase() + \"/shiny/64.png\"}\r\n                         alt={\"Country Flag \" + country} className={\"img pointer flag\"}\r\n                         onClick={() => props.mapClick(country.toLowerCase())}/>\r\n                </div>\r\n            )}\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default Countries;\r\n\r\n// import React from \"react\";\r\n// import Networks from \"./networks\";\r\n//\r\n// class Countries extends React.Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//\r\n//         // this.handleLoadCountryNetworks = this.handleLoadCountryNetworks.bind(this);\r\n//         this.handleMapClick = this.handleMapClick.bind(this);\r\n//     }\r\n//\r\n//     handleMapClick(country) {\r\n//         console.log(country);\r\n//         this.setState({\r\n//             selectedCountry: country,\r\n//             isLoading: false,\r\n//             isFirstLoad: false,\r\n//         });\r\n// return (\r\n//  //   this.props.handleLoadCountryNetworks(country)\r\n//\r\n//     <Networks country={this.state.selectedCountry} isFirstLoad={this.props.isFirstLoad}/>\r\n//\r\n// )\r\n// }\r\n\r\n//     componentDidUpdate(prevProps, prevState, snapshot) {\r\n//         console.log(\"cdu \", prevProps, prevProps, snapshot);\r\n//     }\r\n//\r\n//     render() {\r\n//         if (!this.props.networks || this.props.networks.length === 0) return null;\r\n//         // west of 50\r\n//         const distinctCountries = this.props.networks.filter(lat => parseFloat(lat.location.latitude) <= 50.00);\r\n//         // distinct countries\r\n//         const newList = [...new Set(distinctCountries.map(c => c.location.country))];\r\n//         newList.sort();\r\n//\r\n//         return (\r\n//             <React.Fragment>\r\n//                 {newList.map((country, index) =>\r\n//                     <div key={country + \"-\" + index}>\r\n//                         <img src={\"https://www.countryflags.io/\" + country.toLowerCase() + \"/shiny/64.png\"}\r\n//                              alt={\"Country Flag \" + country} className={\"img pointer\"}\r\n//                              onClick={() => this.handleMapClick(country.toLowerCase())}/>\r\n//                     </div>\r\n//                 )}\r\n//             </React.Fragment>\r\n//         );\r\n//     }\r\n// }\r\n//\r\n// export default Countries;","const networks = () => {\r\n    return 'https://api.citybik.es/v2/networks'\r\n};\r\nconst stations = (id) => {\r\n    return 'http://api.citybik.es/v2/networks/?fields=stations' + id\r\n};\r\n\r\nexport default {networks, stations};","import React from \"react\";\r\n\r\nconst availabilities = (props) => {\r\n    // if (!availabilities || availabilities.length === 0) return null;\r\n    console.log(props.networks);\r\n    return (\r\n        <React.Fragment>\r\n\r\n            {props.firstLoad && \"Please select a Country from the left.\"}\r\n\r\n            {props.networks.map((network, index) =>\r\n                <div className=\"card\" key={network + \"-\" + index}>\r\n                    <div className=\"card-body\">\r\n                        <h1 className={\"display-4 text-center\"}>{network.location.city}</h1>\r\n                        <p>Availability: {}</p>\r\n                        <div>\r\n                            {network.name}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default availabilities;","import React from \"react\";\r\n\r\nconst Flag = (flag) => {\r\n    if (!flag || flag.length === 0) return null;\r\n    return (\r\n        <React.Fragment>\r\n            <div className={\"selected-flag-container\"}>\r\n                <img src={\"https://www.countryflags.io/\" + flag.flag + \"/shiny/64.png\"}\r\n                     alt={\"Country Flag \" + flag.flag} className={\"img\"}/>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default Flag;","import React, {Component} from 'react'\nimport Loading from \"./images/loading.gif\"\nimport Countries from \"./components/countries\";\nimport axios from \"axios\";\nimport utils from \"./utils\";\nimport Availabilities from \"./components/availabilities\";\nimport SelectedCountryFlag from \"./components/SelectedCountryFlag\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            networks: [],\n            selectedCountry: null,\n            isFirstLoad: true,\n            countryNetworks: [],\n        };\n        this.handleMapClick = this.handleMapClick.bind(this);\n    };\n\n    handleMapClick = (country) => {\n        const placeList = this.state.networks.filter(i => i.location.country === country.toUpperCase())\n            .sort((a, b) => a.location.city.localeCompare(b.location.city));\n\n        const PromiseArr = [];\n        for (let i = 0; i < placeList.length; i++) {\n            if (placeList[i].id) {\n                let url = utils.stations(placeList[i].id);\n                console.log(placeList[i].id);\n                PromiseArr.push(\n                    axios.get(url).then(result => new Promise(resolve => resolve(result.data)))\n                );\n            }\n        }\n\n        Promise.all(PromiseArr).then(res => {\n            console.log(\"res: \",res)\n        });\n        this.fetchCountryData();\n        this.setState({\n            selectedCountry: country,\n            countryNetworks: placeList,\n            isFirstLoad: false,\n        });\n    };\n\n    fetchCountryData() {\n        axios.get(utils.stations(), {})\n            .then(networks => {\n                this.setState({\n                    networks: networks.data.networks,\n                    isLoading: false\n                });\n            })\n            .catch(error => this.setState({error, isLoading: false}));\n    }\n\n    componentDidMount() {\n        this.setState({\n            isLoading: true\n        });\n        this.fetchNetworks();\n    }\n\n    fetchNetworks() {\n        axios.get(utils.networks(), {})\n            .then(networks => {\n                this.setState({\n                    networks: networks.data.networks,\n                    isLoading: false\n                });\n            })\n            .catch(error => this.setState({error, isLoading: false}));\n    }\n\n    render() {\n        if (this.state.isLoading) {\n            return (\n                <img className={\"loading-img\"} src={Loading} alt={\"Loading...\"}/>\n            )\n        } else {\n            return (\n                <div className=\"row\">\n                    <div className=\"col-12 bg-primary\" id={\"selectedFlag\"}>\n                        {\n                            this.state.selectedCountry ? <SelectedCountryFlag flag={this.state.selectedCountry}/> : ''\n                        }\n                    </div>\n                    <div className=\"col-1 text-center\" id={\"flags\"}>\n                        <Countries networks={this.state.networks}\n                                   mapClick={this.handleMapClick}\n                                   isFirstLoad={this.state.isFirstLoad}/>\n                    </div>\n                    <div className=\"main col-8 bg-warning h-100 py-3\" id={\"main\"}>\n                        <Availabilities networks={this.state.countryNetworks} firstLoad={this.state.isFirstLoad}/>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}